[
  {
    "id": "wake-auth-flow",
    "type": "tab",
    "label": "Wake on Demand",
    "disabled": false,
    "info": "Handles wake-on-demand for beefy server"
  },
  {
    "id": "wake-auth-endpoint",
    "type": "http in",
    "z": "wake-auth-flow",
    "name": "Wake Auth Endpoint",
    "url": "/wake-auth",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 140,
    "y": 100,
    "wires": [["check-server-status"]]
  },
  {
    "id": "check-server-status",
    "type": "function",
    "z": "wake-auth-flow",
    "name": "Check Server Status",
    "func": "// Check if beefy server is awake\nconst http = require('http');\n\nconst options = {\n  hostname: '192.168.1.102',\n  port: 8080,\n  path: '/health',\n  method: 'GET',\n  timeout: 3000\n};\n\nconst req = http.request(options, (res) => {\n  if (res.statusCode === 200) {\n    // Server is awake, allow request\n    msg.statusCode = 200;\n    msg.headers = {\n      'X-Wake-Status': 'awake'\n    };\n    node.send([msg, null]);\n  } else {\n    // Server responded but not healthy\n    msg.statusCode = 503;\n    msg.payload = 'Server not healthy';\n    node.send([null, msg]);\n  }\n});\n\nreq.on('error', (err) => {\n  // Server is likely asleep, trigger wake\n  msg.payload = {\n    mac: '74:56:3c:96:79:a3',\n    broadcast: '192.168.1.255'\n  };\n  node.send([null, msg]);\n});\n\nreq.on('timeout', () => {\n  req.destroy();\n  msg.payload = {\n    mac: '74:56:3c:96:79:a3',\n    broadcast: '192.168.1.255'\n  };\n  node.send([null, msg]);\n});\n\nreq.end();",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 100,
    "wires": [["allow-request"], ["wake-server"]]
  },
  {
    "id": "allow-request",
    "type": "http response",
    "z": "wake-auth-flow",
    "name": "Allow Request",
    "statusCode": "",
    "headers": {},
    "x": 580,
    "y": 60,
    "wires": []
  },
  {
    "id": "wake-server",
    "type": "http request",
    "z": "wake-auth-flow",
    "name": "Send WOL",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://wol-api:5000/wol",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "other",
        "keyValue": "Content-Type",
        "valueType": "other", 
        "valueValue": "application/json"
      }
    ],
    "x": 570,
    "y": 140,
    "wires": [["wait-for-wake"]]
  },
  {
    "id": "wait-for-wake",
    "type": "function",
    "z": "wake-auth-flow",
    "name": "Wait and Retry",
    "func": "// Wait for server to wake up (up to 60 seconds)\nconst maxRetries = 12; // 60 seconds / 5 second intervals\nconst retryInterval = 5000;\n\nif (!msg.retryCount) {\n    msg.retryCount = 0;\n}\n\nif (msg.retryCount >= maxRetries) {\n    // Give up after max retries\n    msg.statusCode = 504;\n    msg.payload = 'Server wake timeout';\n    msg.headers = {\n        'X-Wake-Status': 'timeout'\n    };\n    node.send([null, msg]);\n    return;\n}\n\nmsg.retryCount++;\n\n// Wait before checking\nsetTimeout(() => {\n    node.send([msg, null]);\n}, retryInterval);\n\nreturn null;",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 140,
    "wires": [["check-wake-status"], ["wake-timeout"]]
  },
  {
    "id": "check-wake-status",
    "type": "function",
    "z": "wake-auth-flow",
    "name": "Check Wake Status",
    "func": "// Check if server is now awake\nconst http = require('http');\n\nconst options = {\n  hostname: '192.168.1.102',\n  port: 8080,\n  path: '/health',\n  method: 'GET',\n  timeout: 3000\n};\n\nconst req = http.request(options, (res) => {\n  if (res.statusCode === 200) {\n    // Server is now awake\n    msg.statusCode = 200;\n    msg.headers = {\n      'X-Wake-Status': 'woke-up'\n    };\n    node.send([msg, null]);\n  } else {\n    // Still not ready, retry\n    node.send([null, msg]);\n  }\n});\n\nreq.on('error', (err) => {\n  // Still not awake, retry\n  node.send([null, msg]);\n});\n\nreq.on('timeout', () => {\n  req.destroy();\n  node.send([null, msg]);\n});\n\nreq.end();",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 940,
    "y": 100,
    "wires": [["allow-request"], ["wait-for-wake"]]
  },
  {
    "id": "wake-timeout",
    "type": "http response",
    "z": "wake-auth-flow",
    "name": "Wake Timeout",
    "statusCode": "504",
    "headers": {},
    "x": 940,
    "y": 180,
    "wires": []
  }
]
